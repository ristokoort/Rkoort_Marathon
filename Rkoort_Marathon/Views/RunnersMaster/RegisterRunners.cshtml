@model AddRunnersViewModel
@{
    ViewData["Title"] = "Home Page";
    
}

<div class="text-center">
    <h3>REGISTER RUNNERS</h3>
</div>
<br />
<form asp-action="Addrunners">
    <div class="form-group col-4">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <label asp-for="NewRunner.FirstName" class="control-label"></label>

        <input asp-for="NewRunner.FirstName" class="form-control" />
        <span asp-validation-for="NewRunner.FirstName" class="text-danger"></span>

    </div>
    <br />
    <div class="form-group col-4">
        <label asp-for="NewRunner.LastName" class="control-label"></label>
        
        <input asp-for="NewRunner.LastName" class="form-control" />
        <span asp-validation-for="NewRunner.LastName" class="text-danger"></span>
    </div>


    <br />
    <div class="form-group">
        <button class="btn btn-info">Save</button>
    </div>

</form>

<br />
<hr />

<table class="table">
    <thead class="thead-dark">
        <tr>
            <th scope="col">#</th>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>

        </tr>
    </thead>
    <tbody>


        @for(var i=0; i<Model.RegisteredRunners.Count();i++ )
        {
            <tr>
                <th scope="row">@i</th>
                <td>@Html.DisplayFor(x=>Model.RegisteredRunners[i].FirstName)</td>
                <td>@Html.DisplayFor(x=>Model.RegisteredRunners[i].LastName)</td>
                <td></td>
            </tr>
        }

       
    </tbody>
</table>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    }